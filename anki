#!/usr/bin/env bash

decks=$1

if [[ -z $ANKI_COLLECTION_PATH ]]; then
    ANKI_COLLECTION_PATH="$HOME/.local/share/Anki2/User 1/collection.anki2"
fi

learning_count=0
all_count=0
duration_min=0

OLDIFS="$IFS"
IFS=";"
for deck in $decks; do
    deck=$(echo $deck | sed "s/\'//g")

    learning_query="SELECT COUNT(*) FROM cards c JOIN decks d ON c.did = d.id WHERE d.name = '$deck' COLLATE NOCASE AND c.ivl != 0;"
    all_query="SELECT COUNT(*) FROM cards c JOIN decks d ON c.did = d.id WHERE d.name = '$deck' COLLATE NOCASE;"
    today=$(date +%Y-%m-%d)
    duration_query="SELECT SUM(time) FROM revlog r JOIN cards c ON r.cid = c.id JOIN decks d ON c.did = d.id WHERE d.name = '$deck' COLLATE NOCASE AND r.id >= strftime('%s', '$today') * 1000;"

    # TODO: Is there really no other way to work around the exclusive lock that
    # Anki or AnkiConnect seems to hold than copying the whole database?
    uuid=$(uuidgen)
    tmp_db=/tmp/anki-${uuid}.sqlite3
    cp "$ANKI_COLLECTION_PATH" $tmp_db
    learning_count=$(($learning_count + $(sqlite3 -readonly $tmp_db "$learning_query")))
    all_count=$(($all_count + $(sqlite3 -readonly $tmp_db "$all_query")))
    duration_ms=$(sqlite3 -readonly $tmp_db "$duration_query")
    duration_min=$(($duration_min + duration_ms / 60000))
    rm $tmp_db
done
IFS=$OLDIFS

echo "$learning_count/$all_count ($duration_min min)"
